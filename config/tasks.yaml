architectural_review:
  description: "Conduct a comprehensive architectural and algorithmic analysis of the codebase at {code_path}. Focus on: 1) Overall code structure and organization, 2) Design patterns usage and appropriateness, 3) Algorithmic complexity and efficiency, 4) Separation of concerns and modularity, 5) Scalability and maintainability considerations. Use the analyze_code_structure, analyze_code_complexity, and check_best_practices tools to gather detailed insights."
  expected_output: "A detailed architectural analysis report including: code organization assessment, design pattern evaluation, complexity analysis, architectural recommendations, and academic insights on improving the codebase structure. Include specific examples and line references where applicable."

technology_analysis:
  description: "Perform deep technical analysis of the {project_type} codebase at {code_path}. For Python code: check syntax, style (PEP 8), imports, and Python-specific best practices. For React components: analyze hooks usage, component structure, performance patterns, and accessibility. For SQL: validate query syntax, check for injection risks, and performance issues. If localhost_port is provided, also check the running localhost site for accessibility, performance, and basic functionality. Use check_python_syntax, analyze_react_components, validate_sql_queries, validate_imports, and check_localhost_site tools as appropriate for the project type."
  expected_output: "A comprehensive technical analysis report covering: syntax validation results, framework-specific issues, performance concerns, technology-specific best practices violations, localhost site status (if applicable), and detailed recommendations for each technology stack found in the codebase."

dependency_validation:
  description: "Analyze all package dependencies and dependency management practices for the project at {code_path}. Examine requirements.txt, package.json, and other dependency files. Check for: 1) Version compatibility issues, 2) Security vulnerabilities in dependencies, 3) Outdated packages, 4) Missing dependencies, 5) Dependency conflicts. Use check_package_dependencies and validate_imports tools to perform thorough dependency analysis."
  expected_output: "A detailed dependency analysis report including: dependency health score, security vulnerability assessment, version compatibility analysis, missing dependency identification, and specific recommendations for dependency management improvements."

security_assessment:
  description: "Conduct a thorough security assessment of the codebase at {code_path}. Scan for: 1) Common security vulnerabilities (OWASP Top 10), 2) Hardcoded secrets and credentials, 3) Injection attack vectors, 4) Insecure coding patterns, 5) Authentication and authorization issues. Use scan_security_vulnerabilities and check_best_practices tools to identify security risks and provide remediation guidance."
  expected_output: "A comprehensive security assessment report categorizing findings by risk level (high, medium, low), providing specific vulnerability details, potential impact analysis, and detailed remediation steps for each security issue identified."

comprehensive_qa:
  description: "Synthesize all previous analysis results and perform final comprehensive QA testing for the project at {code_path}. Review findings from architectural, technical, dependency, and security assessments. Conduct additional general QA tests including: 1) Code quality metrics, 2) Documentation assessment, 3) Testing coverage evaluation, 4) Overall maintainability analysis. If localhost_port is provided, perform final localhost site verification. Use run_general_qa_tests, analyze_code_structure, and check_localhost_site tools. Generate a final executive summary with prioritized recommendations."
  expected_output: "A comprehensive QA report that synthesizes all findings into an executive summary, provides an overall quality score, lists critical issues requiring immediate attention, includes localhost site status (if applicable), includes a prioritized action plan, and offers specific recommendations for improving code quality, security, and maintainability. This report should be suitable for both technical teams and management review." 